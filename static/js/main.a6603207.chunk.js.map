{"version":3,"sources":["utils.js","counterStore.js","App.js","reportWebVitals.js","index.js"],"names":["getCounterTime","seconds","hh","Math","floor","mm","ss","formatTime","tt","String","length","STATUS","on","of","wait","subject","Subject","initialState","status","value","state","counterStore","init","next","subscribe","setState","tick","newValue","toggle","newStatus","off","reset","App","useState","counterState","setCounterState","useLayoutEffect","timerId","setInterval","clearInterval","className","onClick","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAO,SAASA,EAAeC,GAC7B,IAAMC,EAAKC,KAAKC,MAAMH,EAAU,MAC1BI,EAAKF,KAAKC,OAAOH,EAAe,KAALC,GAAa,IACxCI,EAAKL,EAAU,GAErB,OAAOM,EAAWL,GAAM,IAAMK,EAAWF,GAAM,IAAME,EAAWD,GAGlE,SAASC,EAAWC,GAClB,OAA6B,IAAtBC,OAAOD,GAAIE,OAAe,IAAMF,EAAKA,E,mBCNjCG,EAAS,CAClBC,GAAI,KAAMC,GAAI,MAAOC,KAAK,QAGxBC,EAAU,IAAIC,IACdC,EAAe,CACnBC,OAAQP,EAAOE,GACfM,MAAO,GAGLC,EAAQH,EAkDGI,EAhDM,CACnBC,KAAM,WACJF,EAAK,2BAAQA,GAAR,IAAeD,MAAO,EAAGD,OAAQP,EAAOE,KAC7CE,EAAQQ,KAAKH,IAEfI,UAAW,SAACC,GAAD,OAAcV,EAAQS,UAAUC,IAC3CC,KAAM,WACJ,IAAIC,EAAWP,EAAMF,SAAWP,EAAOC,GAAKQ,EAAMD,MAAQ,EAAIC,EAAMD,MAIzD,MAFAhB,KAAKC,MAAMuB,EAAW,QAG/BA,EAAW,GAEbP,EAAK,2BACAA,GADA,IAEHD,MAAOQ,IAGTZ,EAAQQ,KAAKH,IAEfQ,OAAQ,SAACV,GACP,IAAMW,EAAYX,IAAWP,EAAOC,GAAKD,EAAOmB,IAAMnB,EAAOC,GAEvDe,EAAWT,IAAWP,EAAOG,KAAOM,EAAMD,MAAQ,EAExDC,EAAK,2BACAA,GADA,IAEHF,OAAQW,EACRV,MAAOQ,IAETZ,EAAQQ,KAAKH,IAEfN,KAAM,WACJM,EAAK,2BACAA,GADA,IAEHF,OAAQP,EAAOG,OAEjBC,EAAQQ,KAAKH,IAGfW,MAAO,WACLX,EAAK,2BAAQA,GAAR,IAAeF,OAAQP,EAAOC,GAAIO,MAAO,IAC9CJ,EAAQQ,KAAKH,IAEfH,gBCKae,MA7Df,WAAgB,IAAD,EAC2BC,mBAASZ,EAAaJ,cADjD,mBACNiB,EADM,KACQC,EADR,KA4Bb,OAzBAC,2BAAgB,WACdf,EAAaC,OACbD,EAAaG,UAAUW,GAEvB,IAAME,EAAUC,aAAY,WAC1BjB,EAAaK,SACZ,KAEH,OAAO,WACLa,cAAcF,MAEf,IAeD,uBAAMG,UAAU,MAAhB,UACE,wBAAQA,UAAU,aAAlB,SACE,oBAAIA,UAAU,kBAAd,qBAGF,oCACE,qBAAKA,UAAU,QAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BxC,EAAekC,EAAaf,WAGzD,qBAAIqB,UAAU,UAAd,UACE,oBAAIA,UAAU,eAAd,SACE,wBAAQA,UAAU,gBAAgBC,QAzBnB,SAAC,GAAe,EAAbC,OAC1BrB,EAAaO,OAAOM,EAAahB,SAwBzB,SACGgB,EAAahB,SAAWP,EAAOC,GAAK,OAAS,YAGlD,oBAAI4B,UAAU,eAAd,SACE,wBAAQA,UAAU,eAAeC,QA1BnB,SAAC,GAAe,EAAbC,OACzBrB,EAAaP,QAyBL,oBAIF,oBAAI0B,UAAU,eAAd,SACE,wBAAQA,UAAU,gBAAgBC,QA3BnB,SAAC,GAAe,EAAbC,OAC1BrB,EAAaU,SA0BL,+BC3CGY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6603207.chunk.js","sourcesContent":["export function getCounterTime(seconds) {\r\n  const hh = Math.floor(seconds / 3600);\r\n  const mm = Math.floor((seconds - hh * 3600) / 60);\r\n  const ss = seconds % 60;\r\n\r\n  return formatTime(hh) + \":\" + formatTime(mm) + \":\" + formatTime(ss);\r\n}\r\n\r\nfunction formatTime(tt) {\r\n  return String(tt).length === 1 ? \"0\" + tt : tt;\r\n}\r\n","import { Subject } from \"rxjs\";\r\n\r\n\r\nexport const STATUS = {\r\n    on: 'on', of: 'off', wait:'wait'\r\n}\r\n\r\nconst subject = new Subject();\r\nconst initialState = {\r\n  status: STATUS.of,\r\n  value: 0,\r\n};\r\n\r\nlet state = initialState;\r\n\r\nconst counterStore = {\r\n  init: () => {\r\n    state = { ...state, value: 0, status: STATUS.of };\r\n    subject.next(state);\r\n  },\r\n  subscribe: (setState) => subject.subscribe(setState),\r\n  tick: () => {\r\n    let newValue = state.status === STATUS.on ? state.value + 1 : state.value;\r\n\r\n    const hh = Math.floor(newValue / 3600);\r\n\r\n    if (hh === 100) {\r\n      newValue = 0;\r\n    }\r\n    state = {\r\n      ...state,\r\n      value: newValue,\r\n    };\r\n\r\n    subject.next(state);\r\n  },\r\n  toggle: (status) => {\r\n    const newStatus = status === STATUS.on ? STATUS.off : STATUS.on;\r\n\r\n    const newValue = status === STATUS.wait ? state.value : 0;\r\n\r\n    state = {\r\n      ...state,\r\n      status: newStatus,\r\n      value: newValue,\r\n    };\r\n    subject.next(state);\r\n  },\r\n  wait: () => {\r\n    state = {\r\n      ...state,\r\n      status: STATUS.wait,\r\n    };\r\n    subject.next(state);\r\n  },\r\n\r\n  reset: () => {\r\n    state = { ...state, status: STATUS.on, value: 0 };\r\n    subject.next(state);\r\n  },\r\n  initialState,\r\n};\r\n\r\nexport default counterStore;\r\n","import { getCounterTime } from \"./utils\";\nimport { useLayoutEffect, useState } from \"react\";\nimport counterStore, { STATUS } from \"./counterStore\";\n\nfunction App() {\n  const [counterState, setCounterState] = useState(counterStore.initialState);\n\n  useLayoutEffect(() => {\n    counterStore.init();\n    counterStore.subscribe(setCounterState);\n\n    const timerId = setInterval(() => {\n      counterStore.tick();\n    }, 1000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const handleStartClick = ({ target }) => {\n    counterStore.toggle(counterState.status);\n  };\n\n  const handleWaitClick = ({ target }) => {\n    counterStore.wait();\n  };\n\n  const handleResetClick = ({ target }) => {\n    counterStore.reset();\n  };\n\n  return (\n    <main className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"counter-heading\">Timer</h1>\n      </header>\n\n      <section>\n        <div className=\"tablo\">\n          <p className=\"tablo-text\">{getCounterTime(counterState.value)}</p>\n        </div>\n\n        <ul className=\"actions\">\n          <li className=\"actions-item\">\n            <button className=\"btn btn-start\" onClick={handleStartClick}>\n              {counterState.status === STATUS.on ? \"Stop\" : \"Start\"}\n            </button>\n          </li>\n          <li className=\"actions-item\">\n            <button className=\"btn btn-wait\" onClick={handleWaitClick}>\n              Wait\n            </button>\n          </li>\n          <li className=\"actions-item\">\n            <button className=\"btn btn-reset\" onClick={handleResetClick}>\n              Reset\n            </button>\n          </li>\n        </ul>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}